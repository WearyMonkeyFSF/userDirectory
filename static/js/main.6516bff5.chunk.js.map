{"version":3,"sources":["components/Wrapper.js","components/Jumbotron.js","components/Search.js","components/Item.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","className","this","props","children","React","Component","MyJumbotron","Jumbotron","fluid","style","inputStyle","padding","width","marginBottom","Search","value","search","type","onChange","inputChange","placeholder","aria-label","ItemEmp","name","email","phone","src","image","alt","tableStyle","margin","border","Table","employees","filter","e","toLowerCase","indexOf","onClick","sortName","map","key","id","App","state","list","setState","target","empSort","sort","a","b","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAEqBA,G,6KAEb,OACI,yBAAKC,UAAU,WAAWC,KAAKC,MAAMC,c,GAHZC,IAAMC,Y,QCCtBC,E,uKAEb,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,wBAAIR,UAAU,wCAAd,2B,GAJyBI,IAAMC,WCDzCI,EAAQ,CACVC,WAAY,CACRC,QAAS,OACTC,MAAO,MACPC,aAAc,SAGDC,E,uKAEb,OACI,0BAAMd,UAAU,kDACZ,2BACIe,MAAOd,KAAKC,MAAMc,OAClBhB,UAAU,uBACViB,KAAK,OACLC,SAAUjB,KAAKC,MAAMiB,YACrBC,YAAY,SACZC,aAAW,SACXZ,MAAOA,EAAMC,kB,GAXGN,IAAMC,WCPrBiB,E,uKAEb,OACI,4BACI,4BAAKrB,KAAKC,MAAMqB,MAChB,4BAAKtB,KAAKC,MAAMsB,OAChB,4BAAKvB,KAAKC,MAAMuB,OAChB,4BACI,yBAAKzB,UAAU,iBACX,yBAAKA,UAAU,QAAQ0B,IAAKzB,KAAKC,MAAMyB,MAAOC,IAAK3B,KAAKC,MAAMqB,c,GATjDnB,IAAMC,WCCrCI,EAAQ,CACVoB,WAAY,CACRlB,QAAS,OACTC,MAAO,MACPkB,OAAQ,OACRC,OAAQ,oBAGKC,E,uKACR,IAAD,OACEC,EAAYhC,KAAKC,MAAM+B,UAAUC,QAAQ,SAAAC,GAC3C,OAA4E,IAArEA,EAAEZ,KAAKa,cAAcC,QAAS,EAAKnC,MAAMc,OAAOoB,kBAE3D,OACI,2BAAO3B,MAAOA,EAAMoB,WAAY7B,UAAU,mCACtC,+BACI,4BACI,wBAAIsC,QAASrC,KAAKC,MAAMqC,SAAUxB,MAAM,QAAxC,QACA,wBAAIA,MAAM,SAAV,SACA,wBAAIA,MAAM,SAAV,SACA,wBAAIA,MAAM,SAAV,WAGR,+BACKkB,EAAUO,KAAI,SAAAL,GAAC,OACZ,kBAAC,EAAD,CACIM,IAAKN,EAAEO,GACPnB,KAAMY,EAAEZ,KACRC,MAAOW,EAAEX,MACTC,MAAOU,EAAEV,MACTE,MAAOQ,EAAER,iB,GAtBFvB,IAAMC,W,OCHpBsC,E,4MAGnBC,MAAQ,CACNX,UAAWY,EACX7B,OAAQ,I,EAGVG,YAAc,SAAAgB,GACZ,EAAKW,SAAS,CAAC9B,OAAQmB,EAAEY,OAAOhC,S,EAGlCwB,SAAW,SAAAJ,GACT,IAAIa,EAAU,IAEdA,EAAO,YAAOH,IACJI,MAAK,SAACC,EAAGC,GACf,OAAID,EAAE3B,KAAO4B,EAAE5B,MACL,EAEN2B,EAAE3B,KAAO4B,EAAE5B,KACN,EAEF,KAGT,EAAKuB,SAAS,CACZb,UAAWe,K,uDAOf,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQhC,OAAQf,KAAK2C,MAAM5B,OAAQG,YAAalB,KAAKkB,cACrD,kBAAC,EAAD,CAAOoB,SAAUtC,KAAKsC,SAAUN,UAAWhC,KAAK2C,MAAMX,UAAWjB,OAAQf,KAAK2C,MAAM5B,c,GAtC3DZ,IAAMC,WCInB+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6516bff5.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Wrapper extends React.Component{\n    render(){\n        return(\n            <div className=\"wrapper\">{this.props.children}</div>\n        );\n    }\n}","import React from \"react\";\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\nexport default class MyJumbotron extends React.Component {\n    render(){\n        return (\n            <Jumbotron fluid>\n                <h1 className=\"header d-flex justify-content-center\">Employee Directory</h1>\n            </Jumbotron>\n        )\n    }\n}","import React from \"react\";\n\nconst style = {\n    inputStyle: {\n        padding: \"10px\",\n        width: \"50%\",\n        marginBottom: \"30px\"\n    }       \n}\nexport default class Search extends React.Component{\n    render(){\n        return(\n            <form className=\"form d-flex justify-content-center form-inline\">\n                <input\n                    value={this.props.search}\n                    className=\"form-control mr-sm-2\"\n                    type=\"text\"\n                    onChange={this.props.inputChange}\n                    placeholder=\"Search\"\n                    aria-label=\"Search\"\n                    style={style.inputStyle}\n                />\n            </form>\n        )\n    }\n}\n","import React from \"react\";\n\nexport default class ItemEmp extends React.Component{\n    render(){\n        return(\n            <tr>\n                <td>{this.props.name}</td>\n                <td>{this.props.email}</td>\n                <td>{this.props.phone}</td>\n                <td>\n                    <div className=\"image-wrapper\">\n                        <img className=\"image\" src={this.props.image} alt={this.props.name} />\n                    </div>\n                </td>\n            </tr>\n        )\n    }\n}","import React from \"react\";\nimport ItemEmp from \"./Item.js\";\n\nconst style = {\n    tableStyle: {\n        padding: \"20px\",\n        width: \"80%\",\n        margin: \"auto\",\n        border: \"1px solid black\"\n    }\n}\nexport default class Table extends React.Component{\n    render(){\n        const employees = this.props.employees.filter( e =>{\n            return e.name.toLowerCase().indexOf( this.props.search.toLowerCase() ) !== -1\n        })\n        return(\n            <table style={style.tableStyle} className='table table-hover table-striped'>\n                <thead>\n                    <tr>\n                        <th onClick={this.props.sortName} value='name'>Name</th>\n                        <th value='email'>Email</th>\n                        <th value='phone'>Phone</th>\n                        <th value='image'>Photo</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {employees.map(e =>(\n                        <ItemEmp \n                            key={e.id}\n                            name={e.name}\n                            email={e.email}\n                            phone={e.phone}\n                            image={e.image}\n                        />                        \n                    ))}\n                </tbody>\n            </table>\n        )\n    }  \n}","import React from 'react';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport MyJumbotron from \"./components/Jumbotron\";\nimport Search from \"./components/Search\"\nimport Table from \"./components/Table\";\nimport list from \"./list.json\"\n\nexport default class App extends React.Component{\n\n  //set state\n  state = {\n    employees: list,\n    search: \"\"\n  }\n\n  inputChange = e => {\n    this.setState({search: e.target.value})\n  }\n\n  sortName = e =>{\n    let empSort = [];\n\n    empSort = [...list]\n      empSort.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n    \n      this.setState({\n        employees: empSort\n      })\n  }\n\n\n  render(){\n    \n    return (\n      <Wrapper>\n        <MyJumbotron />\n        <Search search={this.state.search} inputChange={this.inputChange}/>\n        <Table sortName={this.sortName} employees={this.state.employees} search={this.state.search}/>\n      </Wrapper>\n\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}